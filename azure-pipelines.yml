# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  projectDirectory: 'DeployOnPremDemo'
  schemaDataDirectory: '$(Build.SourcesDirectory)\$(projectDirectory)\data'
  publishDirectory: '$(Build.ArtifactStagingDirectory)\_Publish'
  zipDirectory: '$(Build.ArtifactStagingDirectory)\_Zip'
  triggerDeployScript: $(Build.SourcesDirectory)\$(projectDirectory)\TriggerDeploy.ps1

steps:

# 1. Install NuGet
- task: NuGetToolInstaller@1
  displayName: NuGet install

# 2. NuGet restore
- task: NuGetCommand@2
  displayName: NuGet restore
  inputs:
    restoreSolution: '$(solution)'

# 3. Build solution
- task: VSBuild@1
  displayName: Build
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:PublishOutDir=$(publishDirectory)'
    #msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    #msbuildArgs: /p:UseWPP_CopyWebApplication=True /p:PipelineDependsOnBuild=False /p:PublishProfile=ToFileSys.pubxml /p:DeployOnBuild=true /p:AutoParameterizationWebConfigConnectionStrings=False /p:PublishOutDir=$(publishDirectory) /p:MarkWebConfigAssistFilesAsExclude=false /p:TransformWebConfigEnabled=false
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# 4. Run tests
- task: VSTest@2
  displayName: Run tests
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# 5. Include /data/* directory as part of the build output
- task: CopyFiles@2
  displayName: Copy files
  inputs:
    sourceFolder: $(schemaDataDirectory)
    targetFolder: '$(publishDirectory)'

# 6. Zip the build output
- task: ArchiveFiles@2
  displayName: Zip output
  inputs:
    rootFolderOrFile: '$(publishDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(zipDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

# 7. Publish the zipped build output as an artifact
- task: PublishBuildArtifacts@1
  displayName: Published build artifacts
  inputs:
    pathtoPublish: '$(zipDirectory)'
    artifactName: 'zip'
    publishLocation: 'Container'
    
# 7. Publish the TriggerDeploy.ps1 file
- task: PublishBuildArtifacts@1
  displayName: Published deploy trigger script
  inputs:
    pathtoPublish: '$(triggerDeployScript)' 
    artifactName: 'triggerDeploy' 
    publishLocation: 'Container'
